# name: Build and Push Heimdall Full System

# on:
#   push:
#     branches:
#       - main
#     paths:
#       - "bot/**"
#       - "dashboard/**"
#       - "package.json"
#       - "bun.lock"
#       - "Dockerfile"
#       - ".github/workflows/heimdall-full.yml"
#   pull_request:
#     branches:
#       - main
#     paths:
#       - "bot/**"
#       - "dashboard/**"
#       - "package.json"
#       - "bun.lock"
#       - "Dockerfile"
#   workflow_dispatch:
#     inputs:
#       tag_suffix:
#         description: "Optional tag suffix (e.g., -test, -hotfix)"
#         required: false
#         type: string

# env:
#   REGISTRY: ghcr.io
#   IMAGE_NAME: ${{ github.repository }}-full

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     permissions:
#       contents: read
#       packages: write
#       pull-requests: write

#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Set up Bun
#         uses: oven-sh/setup-bun@v1
#         with:
#           bun-version: "1.1.34"

#       - name: Cache Bun dependencies
#         uses: actions/cache@v4
#         with:
#           path: |
#             ~/.bun/install/cache
#             bot/node_modules
#             dashboard/node_modules
#             node_modules
#           key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
#           restore-keys: |
#             ${{ runner.os }}-bun-

#       - name: Install dependencies
#         run: |
#           bun install --frozen-lockfile
#           cd bot && bun install --frozen-lockfile
#           cd ../dashboard && bun install --frozen-lockfile

#       - name: Run bot tests (if they exist)
#         run: |
#           cd bot
#           if [ -f "package.json" ] && grep -q '"test"' package.json; then
#             echo "Running bot tests..."
#             bun run test || echo "No tests found or tests failed - continuing build"
#           else
#             echo "No test script found in bot package.json"
#           fi

#       - name: Run dashboard tests (if they exist)
#         run: |
#           cd dashboard
#           if [ -f "package.json" ] && grep -q '"test"' package.json; then
#             echo "Running dashboard tests..."
#             bun run test || echo "No tests found or tests failed - continuing build"
#           else
#             echo "No test script found in dashboard package.json"
#           fi

#       - name: Build dashboard (for verification)
#         env:
#           SKIP_ENV_VALIDATION: true
#           DATABASE_URL: "file:./dev.db"
#           NEXTAUTH_SECRET: "dummy-secret-for-build"
#           NEXTAUTH_URL: "http://localhost:3000"
#           BOT_API_URL: "http://localhost:3001"
#         run: |
#           cd dashboard
#           echo "Generating Prisma client..."
#           bunx prisma generate
#           echo "Building Next.js application..."
#           bun run build

#       - name: Log in to the Container registry
#         if: github.event_name != 'pull_request'
#         uses: docker/login-action@v3
#         with:
#           registry: ${{ env.REGISTRY }}
#           username: ${{ github.actor }}
#           password: ${{ secrets.GITHUB_TOKEN }}

#       - name: Extract metadata for Docker
#         id: meta
#         uses: docker/metadata-action@v5
#         with:
#           images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
#           tags: |
#             type=ref,event=branch
#             type=ref,event=pr
#             type=raw,value=nightly,enable={{is_default_branch}}
#             type=sha,format=short
#             type=raw,value=latest,enable={{is_default_branch}}
#           labels: |
#             org.opencontainers.image.description=Heimdall Discord Bot with Web Dashboard - Full System
#             org.opencontainers.image.source=https://github.com/${{ github.repository }}
#             org.opencontainers.image.licenses=ISC
#             org.opencontainers.image.title=Heimdall Full System
#             org.opencontainers.image.vendor=${{ github.repository_owner }}

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3
#         with:
#           driver-opts: |
#             image=moby/buildkit:latest

#       - name: Build Docker image (PR only)
#         if: github.event_name == 'pull_request'
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./Dockerfile
#           push: false
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: |
#             type=gha
#             type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly
#           cache-to: type=gha,mode=max
#           platforms: linux/amd64
#           outputs: type=docker,dest=/tmp/heimdall-full.tar

#       - name: Build and push Docker image
#         if: github.event_name != 'pull_request'
#         uses: docker/build-push-action@v5
#         with:
#           context: .
#           file: ./Dockerfile
#           push: true
#           tags: ${{ steps.meta.outputs.tags }}
#           labels: ${{ steps.meta.outputs.labels }}
#           cache-from: |
#             type=gha
#             type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly
#           cache-to: type=gha,mode=max
#           platforms: linux/amd64,linux/arm64
#           provenance: false
#           outputs: type=registry
#           build-args: |
#             BUILDKIT_INLINE_CACHE=1

#       - name: Test Docker image (PR only)
#         if: github.event_name == 'pull_request'
#         run: |
#           echo "Loading Docker image from tar..."
#           docker load --input /tmp/heimdall-full.tar

#           echo "Testing if image can start (timeout after 60 seconds)..."
#           IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)

#           # Start container in detached mode
#           CONTAINER_ID=$(docker run -d \
#             -e NODE_ENV=development \
#             -e DATABASE_URL="file:./dev.db" \
#             -e NEXTAUTH_SECRET="test-secret" \
#             -e NEXTAUTH_URL="http://localhost:3000" \
#             -e BOT_API_URL="http://localhost:3001" \
#             -p 3000:3000 \
#             -p 3001:3001 \
#             "$IMAGE_TAG")

#           echo "Container started with ID: $CONTAINER_ID"

#           # Wait up to 60 seconds for the services to start
#           timeout 60 bash -c '
#             while true; do
#               if docker logs '$CONTAINER_ID' 2>&1 | grep -q "Starting services with concurrently"; then
#                 echo "Services started successfully!"
#                 break
#               fi
#               echo "Waiting for services to start..."
#               sleep 5
#             done
#           ' || {
#             echo "Services failed to start within 60 seconds"
#             echo "Container logs:"
#             docker logs $CONTAINER_ID
#             docker stop $CONTAINER_ID
#             exit 1
#           }

#           echo "Cleaning up test container..."
#           docker stop $CONTAINER_ID
#           docker rm $CONTAINER_ID

#       - name: Generate deployment summary
#         if: github.event_name != 'pull_request'
#         run: |
#           echo "## 🚀 Heimdall Full System Build Complete" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### 📦 Built Components" >> $GITHUB_STEP_SUMMARY
#           echo "- **Discord Bot**: Built from \`./bot/\`" >> $GITHUB_STEP_SUMMARY
#           echo "- **Web Dashboard**: Built from \`./dashboard/\`" >> $GITHUB_STEP_SUMMARY
#           echo "- **Full System**: Combined in single Docker image" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### 🏷️ Image Tags" >> $GITHUB_STEP_SUMMARY
#           echo '```' >> $GITHUB_STEP_SUMMARY
#           echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
#           echo '```' >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### 🐳 Registry" >> $GITHUB_STEP_SUMMARY
#           echo "Image available at: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}\`" >> $GITHUB_STEP_SUMMARY
#           echo "" >> $GITHUB_STEP_SUMMARY
#           echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
#           echo "- [Container Registry](https://github.com/${{ github.repository }}/pkgs/container/$(echo ${{ env.IMAGE_NAME }} | cut -d'/' -f2))" >> $GITHUB_STEP_SUMMARY
#           echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

#       - name: Comment on PR with build info
#         if: github.event_name == 'pull_request'
#         uses: actions/github-script@v7
#         with:
#           script: |
#             const { owner, repo } = context.repo;
#             const prNumber = context.payload.pull_request.number;

#             const comment = `## 🏗️ Heimdall Full System Build Results

#             ✅ **Build Status**: Successful
#             🐳 **Docker Build**: Completed (image not pushed for PR)
#             🧪 **Container Test**: Passed

#             ### Built Components
#             - **Discord Bot**: ✅ Built from \`./bot/\`
#             - **Web Dashboard**: ✅ Built from \`./dashboard/\`
#             - **Full System**: ✅ Combined in single Docker image

#             ### Test Results
#             - Container startup test: ✅ Passed
#             - Services initialization: ✅ Passed

#             > This PR build is complete and ready for review. The full system Docker image will be built and pushed when this PR is merged.`;

#             await github.rest.issues.createComment({
#               owner,
#               repo,
#               issue_number: prNumber,
#               body: comment
#             });

#   security-scan:
#     runs-on: ubuntu-latest
#     if: github.event_name != 'pull_request'
#     needs: build-and-push
#     permissions:
#       security-events: write
#       actions: read
#       contents: read

#     steps:
#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:nightly
#           format: "sarif"
#           output: "trivy-results.sarif"

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: "trivy-results.sarif"
